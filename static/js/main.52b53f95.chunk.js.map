{"version":3,"sources":["pages/Home/home_container.js","components/github-fetch/github-fetch.js","components/github-fetch/github-fetch_container.js","pages/Home/home.js","App.js","index.js"],"names":["HomeContainer","useState","user","setUserData","repos","setRepos","error","setError","fetchRepoReadme","e","targetOwner","targetRepName","a","currentTarget","classList","toggle","Axios","get","readmeResponse","readmeData","data","str","content","buff","Buffer","from","base64ToString","toString","target","parentNode","querySelector","innerHTML","objectIsEmpty","object","key","hasOwnProperty","showClickHandler","preventDefault","alert","button","document","query","contains","githubFetch","clickHandler","getInput","className","autoComplete","onChange","placeholder","type","id","name","required","onClick","value","GithubFetchContainer","username","setUsername","fetchUser","userResponse","response","message","fetchRepositories","repositoryResponse","useEffect","repos_url","Home","src","avatar_url","alt","map","item","i","owner","login","href","html_url","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52b53f95.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Axios from \"axios\";\r\n\r\n// components ui\r\nimport HomeUI from './home.js';\r\n\r\nconst HomeContainer = () => {\r\n    const [user, setUserData] = useState({});\r\n    const [repos, setRepos] = useState([]); \r\n    const [error, setError]= useState('');\r\n\r\n    const fetchRepoReadme = async (e,targetOwner, targetRepName) => {\r\n        e.currentTarget.classList.toggle('active');\r\n\r\n        let readmeResponse = await Axios.get(`https://api.github.com/repos/${targetOwner}/${targetRepName}/contents/README.md`);\r\n        let readmeData = readmeResponse.data;\r\n        let str = readmeData.content;\r\n        let buff = new Buffer.from(str, 'base64')\r\n        let base64ToString = buff.toString('ascii');\r\n        \r\n        let childP = e.target.parentNode.querySelector('.repo-info p');\r\n\r\n        childP.innerHTML = `Read Me: ${base64ToString}`;\r\n        \r\n    } //set repo readme callback to use it on home container ui\r\n    \r\n    const showClickHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(objectIsEmpty(user)){\r\n            alert(\"Search first!\");\r\n        }else{\r\n            let button = document.querySelector('.home-content button');\r\n            let query = document.querySelector('.home-content__repos');\r\n            query.classList.toggle('active');\r\n\r\n            if(query.classList.contains('active')){\r\n                button.innerHTML = \"Hide Repositories\";\r\n            }else{\r\n                button.innerHTML = \"Repositories\";\r\n            }\r\n        }\r\n    } //show repo button click handler event\r\n\r\n    const objectIsEmpty = (object) => {\r\n        for (let key in object){\r\n            if(object.hasOwnProperty(key)){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    } // custom function for determining empty object\r\n    \r\n    return(\r\n        <HomeUI\r\n            user = {user}\r\n            setUserData = {setUserData}\r\n            repos = {repos}\r\n            setRepos = {setRepos}\r\n            error = {error}\r\n            setError = {setError}\r\n            fetchRepoReadme = {fetchRepoReadme}\r\n            showClickHandler = {showClickHandler}\r\n        />\r\n    )\r\n}\r\n\r\nexport default HomeContainer;","import React from 'react';\r\n\r\nconst githubFetch = ({ clickHandler, getInput }) => {\r\n    \r\n    return(\r\n        <div className=\"github-fetch\">\r\n            <form className=\"input-form\">\r\n                <input autoComplete=\"off\" onChange={ (e) => getInput(e) } className=\"form__home normal-2\" placeholder=\"Search Username\" type=\"text\" id=\"username\" name=\"username\" required/>\r\n                <input className=\"form__submit normal-2\" onClick={ (e) => clickHandler(e) } type=\"button\" value=\"Search\"/> \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default githubFetch;","import React, { useEffect, useState } from 'react';\r\nimport Axios from \"axios\";\r\n\r\n// component ui\r\nimport GithubFetchUI from './github-fetch.js';\r\n\r\nconst GithubFetchContainer = ({ user, setUserData, setRepos, error, setError }) => {\r\n   \r\n    const [username, setUsername] = useState('');\r\n   \r\n    const checkRateLimit = async () => {\r\n        let response = await Axios.get(`https://api.github.com/rate_limit`);\r\n        let data = response.data;\r\n        let reset = new Date(data.rate.reset * 1000);\r\n        // console.log(reset);\r\n        console.log(data.rate);\r\n    }\r\n\r\n    const fetchUser = async () => {\r\n        try{\r\n            let userResponse = await Axios.get(`https://api.github.com/users/${username}`)\r\n            setUserData(userResponse.data);\r\n            setError('');\r\n        }catch (err) {\r\n            if(err.response){\r\n                setError(err.response.data.message);\r\n                setUserData({});\r\n            }\r\n        }\r\n    } // fetch user list based on search input username\r\n\r\n    const fetchRepositories = async (target) => {\r\n        let repositoryResponse = await Axios.get(target);\r\n\r\n        setRepos(repositoryResponse.data);\r\n    } // fetch repositories under the user\r\n\r\n    const clickHandler = (e) => {\r\n        e.preventDefault();\r\n        fetchUser();\r\n    }\r\n\r\n    const getInput = (e) => {\r\n        e.preventDefault();\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // check the current github api rate limit\r\n        // checkRateLimit()\r\n\r\n        if(user.repos_url){\r\n            fetchRepositories(user.repos_url);\r\n        }\r\n    }, [user])\r\n    \r\n   \r\n    return(\r\n        <GithubFetchUI\r\n            clickHandler = {clickHandler}\r\n            getInput = {getInput}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GithubFetchContainer;","import React from 'react';\r\n\r\n// compoenents\r\nimport GithubFetch from '../../components/github-fetch/github-fetch_container.js';\r\n\r\nconst Home = ({ user, setUserData, repos, setRepos, error, setError, fetchRepoReadme, showClickHandler}) => {\r\n   \r\n    return(\r\n        <div className=\"home\">\r\n            <header className=\"normal-1\">github fetch</header>\r\n            <GithubFetch\r\n              user = {user}\r\n              setUserData = {setUserData}\r\n              setRepos = {setRepos}\r\n              setError = {setError}\r\n              error = {error}\r\n            />\r\n\r\n            <div className=\"home-content\">\r\n                <div key={user.id} className=\"home-content__profile\">\r\n                    <img src={user.avatar_url} alt=\"\"/>\r\n                    <span className=\"normal-2\">{user.name}</span>\r\n                </div>\r\n                <button className=\"normal-2\" onClick={(e) =>showClickHandler(e)}>Repositories</button>\r\n                { error ? (<span className=\"normal-1 error\">{error}</span>) \r\n                : (<div className=\"home-content__repos\">\r\n                    {repos ? repos.map( (item, i) => (\r\n                        <div key={item.id} onClick={(e)=> fetchRepoReadme(e,item.owner.login, item.name)} className={`home-content__repos-holder repo-${i}`}>\r\n                            <span className=\"normal-1\">{item.name}</span>\r\n                            <div className=\"repo-info\">\r\n                                <a href={item.html_url} className=\"normal-2\">Repo Link</a>\r\n                                <p className={`normal-2 p-${i}`}></p>\r\n                            </div>\r\n                            \r\n                        </div>)) \r\n                : (<span className=\"normal-1\"> Loading . . .</span>)}</div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\n\n// pages\nimport Home from './pages/Home/home_container.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './dist/css/style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}